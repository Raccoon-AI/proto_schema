syntax = "proto2";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "job.proto";

option go_package = "./pb";

message Point {
  optional uint64 id = 1;
  required double lon = 3;
  required double lat = 4;
  optional google.protobuf.Timestamp date_time = 5;
}

message DepartInfo {
  optional uint64 id = 1;
  optional string name = 2;
  optional double lon = 3;
  optional double lat = 4;
  optional google.protobuf.Timestamp date_time = 5;
}

message SourcesAndTargets {
  repeated Point sources = 1;
  repeated Point targets = 2;
}

message SourcesToTargetsIn {
  repeated Point sources = 1;
  repeated Point targets = 2;
  optional string costing = 3;
  optional bool verbose = 4;
  optional string shape_format = 5;
}

message SourcesToTargetsOut {
  optional string shapes = 1;
  required bytes durations = 2;
  required bytes distances = 3;
  required uint64 num_sources = 4;
  required uint64 num_targets = 5;
}

message CostInfoOut {
  required google.protobuf.Timestamp time = 1;
  required Point source_point = 2;
  required Point destination_point = 3;
  required Point location = 4;
  required google.protobuf.Duration d2l = 5;
  required google.protobuf.Duration l2d = 6;
  required google.protobuf.Duration service_duration = 7;
  required google.protobuf.Duration dumping_duration = 8;
}

message CostInfoIn {
  required Job job = 1;
  required Point source_point = 2;
  optional Point destination_point = 3;
  optional google.protobuf.Timestamp time = 4;
}

message WebCostInfoIn {
  required uint64 driver_on_shift_id = 1;
  required Point source_point = 2;
  required uint64 job_id = 3;
  required Point destination_point = 4;
}

message RouteWaypointsIn {
  repeated Point waypoints = 1;
}

message RouteStep {
  required string points = 1;
  required uint64 duration = 2;
  required uint64 length = 3;
}

message RouteLeg {
  repeated RouteStep steps = 1;
}

message RouteWaypointsOut {
  repeated RouteLeg legs = 1;
  repeated Point waypoints = 2;
}

service CompositeCostProvider {
  rpc GetMatrix(SourcesAndTargets) returns (SourcesToTargetsOut);
  rpc GetCostInfo(CostInfoIn) returns (CostInfoOut);
  rpc Route(RouteWaypointsIn) returns (RouteWaypointsOut);
}

service ValhallaCostProvider {
  rpc SourcesToTargets(SourcesToTargetsIn) returns (SourcesToTargetsOut);
  rpc OptimizedRoute(RouteWaypointsIn) returns (RouteWaypointsOut);
}
