syntax = "proto2";

import "google/protobuf/timestamp.proto";

enum JobStatus {
  JOB_STATUS_UNDEFINED = 0;
  JOB_STATUS_CREATED = 1;
  JOB_STATUS_ASSIGNED = 2;
  JOB_STATUS_ENROUTE = 3;
  JOB_STATUS_COMPLETED = 4;
  JOB_STATUS_CANCELLED = 5;
}

// GET => /v1/api/job/{id}
message Job {
  required uint64 id = 1;
  required google.protobuf.Timestamp created_at = 2;
  required string name = 3;
  required string type = 4;
  required JobStatus status = 5;
  optional uint64 source_location_id = 6;
  optional uint64 destination_location_id = 7;
  optional google.protobuf.Timestamp plan_start_at = 8;
  optional google.protobuf.Timestamp plan_end_at = 9;
  optional google.protobuf.Timestamp fact_start_at = 10;
  optional google.protobuf.Timestamp fact_end_at = 11;
  required uint64 author_id = 12;
  optional uint64 actor_id = 13;
  required uint64 organization_id = 14;
  required google.protobuf.Timestamp time_window_start_at = 15;
  required google.protobuf.Timestamp time_window_end_at = 16;
  optional uint64 sequence_idx = 17;
  optional uint64 travel_process_id = 18;
  optional uint64 service_process_id = 19;
  optional uint64 route_id = 20;
}

// POST => /v1/api/job/create
message JobCreate {
  required string name = 1;
  optional uint64 author_id = 2;
  optional uint64 organization_id = 3;
  required google.protobuf.Timestamp time_window_start_at = 4;
  required google.protobuf.Timestamp time_window_end_at = 5;
}

message JobUpdate {
  required uint64 id = 1;
  optional string name = 2;
  optional JobStatus status = 3;
  optional google.protobuf.Timestamp fact_start_at = 4;
  optional google.protobuf.Timestamp fact_end_at = 5;
  optional uint64 author_id = 6;
  optional uint64 actor_id = 7;
  optional uint64 sequence_idx = 8;
  optional uint64 travel_process_id = 9;
  optional uint64 service_process_id = 10;
  optional uint64 route_id = 11;
}

// POST => /v1/api/job/status_update
// Sent when the job status is updated.
// if status is `JOB_STATUS_COMPLETED` then the system must update:
// - `route[route_id].num_completed_jobs`
message JobStatusUpdate {
  required uint64 id = 1;
  required JobStatus status = 2;
}

// POST => /v1/api/job/pickup_start
// Sent when the driver arrives at the waste pickup point.
// When the message arrived, updates:
// - `pickup_started_at`
message JobPickUpStart {
  required uint64 id = 1;
}

// POST => /v1/api/job/pickup_finish
// Sent when the driver finishes the waste pickup.
// When the message arrived, updates:
// - `pickup_finished_at`
message JobPickUpFinish {
  required uint64 id = 1;
}

// GET => /v1/api/job/list
// Params:
// - assigned : bool
// - completed : bool
// - cancelled : bool
message JobList {
  repeated Job jobs = 1;
}
